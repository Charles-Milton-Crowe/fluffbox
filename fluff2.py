

from cls_org import cls_chapter

""" Although not entirely completed the idea is that the modular nature
    of the cls_company will allow different configurations possible
    for a given chapter. For instance, the old 1-10 system or this new 
    3 fleet system, or a combination of these things. Allowing different
    options at chapter creation.
    
    The chapter contains a list of commands with each member of the list
    being an instance of cls_command. This class has a commander(A new
    rank between captains and chapter master) and controls a snakelike
    assembly of cls_companies that pass through marines in a bottom up
    fashion having been called to do so in a top down fashion.
    
    These 'request' methods in cls_company call other copies of itself in 
    seperate instances of the class. B.Foo calls B.Input.Foo(which is A.Foo) as A 
    is passed to B as an input at __init__.
    
    A given marine is generated by cls_marine_generator having been 
    requested by a scout(bottom) company of a fleet(command). The marine 
    is held in Scout, on through Reserves,Battleline, Assault companies.
    
        A special company cls_marine_generator provides an endcap to the 
    recursive nature of the method calls. It provides the
    initial marine and is the 'switch-hub' for transitions between ranks.
    If the scout companies request a rank. The cls_marine_generator provides
    the correct marine 1 rank down in the rank chain and requests him
    from the veteran company.
     
    The Dict-Key clever code changes are breaking my mind and might be the 
    cause of why the roll_fate() bug exists."""





#############################################
# Program Start #############################
#############################################

print(""" 
    This is the prototype for the new cls_chapter system.\n
    Instead of a roster(conga-line) of marines, chapters 
    will have a veteran company and 3 commands comprising 
    4 companies each.\n
    Each company will have a mini roster for all ranks in the company\n""")

chapter = cls_chapter("Chapter Crusade Fleet")
chapter.display_commands()
input("[Enter Anything]")

chapter.display_troop_strength()
keepgoing = int(input("Press 0 to keep going"))

while keepgoing == 0:

    """ Ok, somehow, even though the previous display shows attrition in 
        the various company rosters. Those changes arent happening??
        
        What i see is that no new marines are created but each time the 
        roll_fate func is called new values are displayed.
        
        If this was working correctly repeated calls to roll_fate would
        result in decreasing totals of marines as they are not replenished
        between calls at present."""

    for command in chapter.commands:
        for company in command.companies:
            print("Roster for: ", company.name)
            roster = company.get_roster()
            for line in roster:
                print(line)

    chapter.roll_fate()
    chapter.display_troop_strength()

    keepgoing = int(input("Press 0 to keep going"))